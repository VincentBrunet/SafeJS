
var utils = require("../utils");
var peg = require("pegjs");
var backtrace = require('pegjs-backtrace');

/*
test.abc(hop, fn {
  return 42;
});

module.exports = function ast_parse(session:Int, next) {
  var ttt = class {
    var ttt = 42;
    var lll = 22;
  };
  var hop = new ttt();
  console.log(hop.ttt);
  function taker(cc :Class, params :Tuple) {
    return new cc();
  }
};
*/

module.exports = function ast_parse(session, next) {
  var grammars = [
    "grammar/top-levels/Globals.gf",
    "grammar/top-levels/Block.gf",
    "grammar/top-levels/Statement.gf",
    "grammar/top-levels/Expression.gf",
    "grammar/statements/Class.gf",
    "grammar/statements/Variable.gf",
    "grammar/statements/Condition.gf",
    "grammar/statements/Loop.gf",
    "grammar/statements/Return.gf",
    "grammar/statements/TryCatch.gf",
    "grammar/expressions/Function.gf",
    "grammar/expressions/Litteral.gf",
    "grammar/expressions/Operation.gf",
    "grammar/basics/Type.gf",
    "grammar/basics/Array.gf",
    "grammar/basics/Dict.gf",
    "grammar/basics/Tuple.gf",
    "grammar/atomics/Boolean.gf",
    "grammar/atomics/Number.gf",
    "grammar/atomics/String.gf",
    "grammar/atomics/Identifier.gf",
    "grammar/atomics/Whitespace.gf",
    "grammar/atomics/Comment.gf",
  ];
  var grrr = [
    "test",
    "test2"
  ];
  session.profilingStart("parser-grammar");
  utils.fileContents(grammars, function(success, contents, error, reason) {
    session.profilingEnd("parser-grammar");
    if (!success) {
      return next(false, error, "ReadGrammars");
    }
    //session.setGrammarLines(contents.split(/\r?\n/));
    try {
      session.profilingStart("parser-build");
      var toBuild = contents;
      var parser = peg.generate(toBuild, {
        output: "parser",
        optimize: "speed",
        cache: true,
        trace: true,
      });
      session.profilingEnd("parser-build");
    }
    catch (error) {
      return next(false, error, "GrammarBuild");
    }
    session.profilingStart("parser-input");
    utils.fileContents([session.getInputFilename()], function(success, contents, error) {
      session.profilingEnd("parser-input");
      if (!success) {
        return next(false, error, "ReadSource");
      }
      //session.setInputLines(contents.split(/\r?\n/));
      var maxOff = undefined;
      var maxEvent = undefined;
      //var backtracer = new backtrace(contents);
      try {
        session.profilingStart("parser-parse");
        var toParse = contents;
        var parsed = parser.parse(toParse, {
          startRule: "Block",
          cache: true,
          tracer: backtracer,
          tracer_: {
            trace: function (event) {
              if (event.type != "rule.fail") {
                return;
              }
              if (maxOff == undefined || event.location.start.offset > maxOff) {
                maxOff = event.location.start.offset;
                maxEvent = event;
              }
              console.log("Trace", a, b, c);
            },
          },
        });
        session.profilingEnd("parser-parse");
        session.setParsedAst(parsed);
        return next(true);
      }
      catch (error) {
        console.log(backtracer.getBacktraceString());
        error.location = maxEvent.location;
        console.log("Parsed", maxOff, maxEvent);
        return next(false, error, "ParserTokens");
      }
    });
  });
};